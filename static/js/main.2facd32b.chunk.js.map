{"version":3,"sources":["assets/images/spacex_logo.svg","components/Header.js","components/Footer.js","components/SatSetting.js","assets/images/satellite.png","components/SatelliteList.js","constants.js","components/WorldMap.js","components/Main.js","components/App.js","index.js"],"names":["Header","className","Component","Footer","React","SatSetting","showSatellite","e","preventDefault","props","form","validateFields","err","values","onShow","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","min","max","style","width","placeholder","marginLeft","textAlign","background","color","marginBottom","htmlType","SatSetting1","Form","create","name","SatelliteList","onChange","console","log","target","dataInfo","checked","selected","state","list","addOrRemove","setState","item","status","found","some","entry","satid","push","filter","onShowSatMap","onShowMap","isLoad","satList","satInfo","above","isLoading","margin","onClick","size","tip","itemLayout","dataSource","renderItem","actions","Meta","avatar","src","satellite","title","satname","description","launchDate","SAT_API_KEY","height","WorldMap","track","data","length","hasOwnProperty","Error","len","positions","context2","map","now","Date","i","timer","setInterval","currentTime","timePassed","time","getTime","clearRect","font","marginTop","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","beginPath","arc","Math","PI","fill","d3Scale","schemeTableau10","refMap","createRef","refTrack","axios","get","then","res","land","feature","objects","countries","features","generateMap","catch","prevProps","prevState","snapshot","satData","observerData","latitude","longitude","elevation","endTime","duration","urls","url","Promise","all","results","arr","geoEckert4","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","current","attr","canvas2","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","ref","Main","showNearBySatellite","setting","fetchSatellite","altitude","isLoadingList","response","showMap","preState","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2facd32b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacex_logo.5a99ad51.svg\";","import React, {Component} from 'react';\r\nimport spacex_logo from '../assets/images/spacex_logo.svg';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                {/*<img src={earth} className=\"App-small-logo\" alt=\"small-logo\" />*/}\r\n                \r\n                <div className=\"title\">\r\n                    Nearby Satellite Tracker\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default Header;","import React from 'react';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer className=\"footer\">\r\n                @2021 Humble Catalyst . All Rights Reserved. Made with ❤ by Sarowar Jahan.\r\n                \r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport {Form, Button, InputNumber} from 'antd';\r\n\r\nclass SatSetting extends React.Component {\r\n    render() {\r\n        // get form object from props.form\r\n        const {getFieldDecorator} = this.props.form;\r\n        const formItemLayout = {\r\n            // responsive\r\n            labelCol: {\r\n                xs: {span: 24},\r\n                sm: {span: 11},\r\n            },\r\n            wrapperCol: {\r\n                xs: {span: 24},\r\n                sm: {span: 13},\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Form {...formItemLayout} className=\"sat-setting\" onSubmit={this.showSatellite}>\r\n                <div className=\"setting-fields\">\r\n                    <Form.Item label=\"Longitude(degrees)\">\r\n                        {getFieldDecorator(\"longitude\", {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your longitude\"\r\n                                }\r\n                            ],\r\n                        })(<InputNumber min={-180} max={180}\r\n                                        style={{width: \"100%\"}}\r\n                                        placeholder=\"Please input longitude\"\r\n                        />)\r\n                        }\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Latitude(degrees)\">\r\n                        {getFieldDecorator(\"latitude\", {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your latitude\"\r\n                                }\r\n                            ],\r\n                        })(<InputNumber min={-90} max={90}\r\n                                        style={{width: \"100%\"}}\r\n                                        placeholder=\"Please input latitude\"\r\n                        />)\r\n                        }\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Elevation(degrees)\">\r\n                        {getFieldDecorator(\"elevation\", {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your elevation\"\r\n                                }\r\n                            ],\r\n                        })(<InputNumber min={-413} max={8850}\r\n                                        style={{width: \"100%\"}}\r\n                                        placeholder=\"Please input elevation\"\r\n                        />)\r\n                        }\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Altitude(degrees)\">\r\n                        {getFieldDecorator(\"altitude\", {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your altitude\"\r\n                                }\r\n                            ],\r\n                        })(<InputNumber min={0} max={90}\r\n                                        style={{width: \"100%\"}}\r\n                                        placeholder=\"Please input altitude\"\r\n                        />)\r\n                        }\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Duration(secs)\">\r\n                        {getFieldDecorator(\"duration\", {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: \"Please input your duration\"\r\n                                }\r\n                            ],\r\n                        })(<InputNumber min={0} max={90}\r\n                                        style={{width: \"100%\"}}\r\n                                        placeholder=\"Please input duration\"\r\n                        />)\r\n                        }\r\n                    </Form.Item>\r\n                </div>\r\n                <Form.Item className=\"show-nearby\">\r\n                    <Button style={{\r\n                        marginLeft: 100,\r\n                        textAlign: \"center\",\r\n                        background: \"linear-gradient(to left, #282c34, #1b528d)\",\r\n                        color: \"#fff\",\r\n                        marginBottom: \"10px\"\r\n                    }}\r\n                            htmlType=\"submit\">\r\n                        Find Your Nearby Satellites!\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n\r\n    showSatellite = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                // console.log('Received values of form: ', values);\r\n                // pass to parent component\r\n                this.props.onShow(values);\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst SatSetting1 = Form.create({name: 'satellite-setting'})(SatSetting);\r\nexport default SatSetting1;","export default __webpack_public_path__ + \"static/media/satellite.f6a4a4f1.png\";","import React from 'react';\r\nimport {Button, Spin, List, Avatar, Checkbox} from 'antd';\r\nimport satellite from '../assets/images/satellite.png'\r\n\r\nclass SatelliteList extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            selected: [],\r\n            isLoad: false\r\n        }\r\n    }\r\n\r\n    onChange = e => {\r\n        console.log(e.target);      //指向返回事件的目标节点(触发该事件的节点)\r\n        const { dataInfo, checked } = e.target;\r\n        const { selected } = this.state;\r\n        const list = this.addOrRemove(dataInfo, checked, selected);\r\n        this.setState( {\r\n            selected: list\r\n        })\r\n    }\r\n\r\n    addOrRemove = (item, status, list) => {\r\n        const found = list.some(entry => entry.satid === item.satid);       // some(): pick all valid items\r\n        // if sat is not in the list -> add to the list\r\n        // else -> do nothing\r\n        if (status && !found) list.push(item);\r\n        if (!status && found) {\r\n            list = list.filter( entry => { return entry.satid !== item.satid; });\r\n        }\r\n        return list;\r\n    }\r\n\r\n    // pass selected sat list to Main component (child -> parent)\r\n    onShowSatMap = () => {\r\n        this.props.onShowMap(this.state.selected);\r\n    }\r\n\r\n    render() {\r\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\r\n        const {isLoad} = this.props.isLoading;\r\n\r\n        return (\r\n            <div className=\"sat-list-box\">\r\n                <Button className=\"sat-list-btn\"\r\n                        style={{\r\n                            textAlign: \"center\",\r\n                            background: \"linear-gradient(to left, #282c34, #1b528d)\",\r\n                            color: \"#fff\",\r\n                            margin: \"10px\"}}\r\n                        onClick={this.onShowSatMap}>\r\n                    Track that Satellite on the Map\r\n                </Button>\r\n\r\n                <hr color=\"#0a2a56\" size=\"1\" width=\"150px\"/>\r\n\r\n                <br />\r\n\r\n                {\r\n                    isLoad ?\r\n                        <div className=\"spin-box\">\r\n                            <Spin tip=\"Loading...\" size=\"large\"/>\r\n                        </div>\r\n                        :\r\n                        <List className=\"sat-list\"\r\n                              itemLayout=\"horizontal\"\r\n                              size=\"small\"\r\n                              dataSource={satList}\r\n                              renderItem={(item) => (\r\n                                  <List.Item actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}>\r\n                                      <List.Item.Meta\r\n                                          avatar={<Avatar size={50} src={satellite}/>}\r\n                                          title={<p>{item.satname}</p>}\r\n                                          description={`Launch Date: ${item.launchDate}`}\r\n                                      />\r\n                                  </List.Item>\r\n                              )}\r\n                        />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SatelliteList;","export const SAT_API_KEY = \"8SH8GT-29KQ2R-73CVJV-4NSE\";\r\nexport const STARLINK_CATEGORY = \"52\";\r\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\r\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\r\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";","import React from 'react';\r\nimport axios from 'axios';\r\nimport {WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY} from \"../constants\";\r\nimport {Spin} from 'antd';\r\nimport {feature} from 'topojson-client';\r\nimport {geoEckert4} from 'd3-geo-projection';\r\nimport {geoGraticule, geoPath} from 'd3-geo';\r\nimport {select as d3Select} from 'd3-selection';\r\nimport {schemeTableau10} from \"d3-scale-chromatic\";\r\nimport * as d3Scale from \"d3-scale\";\r\nimport {timeFormat as d3TimeFormat} from \"d3-time-format\";\r\n\r\n// set canva\r\nconst width = 1180;\r\nconst height = 760;\r\n\r\nclass WorldMap extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isLoading: false,\r\n            isDrawing: false\r\n        }\r\n        this.map = null;\r\n        this.color = d3Scale.scaleOrdinal(schemeTableau10);\r\n        this.refMap = React.createRef();\r\n        this.refTrack = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                const {data} = res;\r\n                console.log(data);\r\n                // convert data to UI\r\n                const land = feature(data, data.objects.countries).features;\r\n                console.log(land);\r\n                this.generateMap(land);\r\n            })\r\n            .catch(err => {\r\n                console.log(`err in fetch world map data: `, err);\r\n            });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.satData !== this.props.satData) {\r\n            // fetch satellite positions\r\n            const {\r\n                latitude,\r\n                longitude,\r\n                elevation,\r\n                duration\r\n            } = this.props.observerData;\r\n            const endTime = duration * 60;\r\n            this.setState({\r\n                isLoading: true\r\n            });\r\n\r\n            const urls = this.props.satData.map(sat => {\r\n                const {satid} = sat;\r\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n\r\n                return axios.get(url);\r\n            });\r\n\r\n            // use promise to deal with multiple requests\r\n            Promise.all(urls)\r\n                .then(results => {\r\n                    console.log(results);\r\n                    const arr = results.map(sat => sat.data);\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        isDrawing: true\r\n                    });\r\n\r\n                    // tracking satellite\r\n                    if (!prevState.isDrawing) {\r\n                        this.track(arr);\r\n                    } else {\r\n                        const oHint = document.getElementsByClassName('hint')[0];\r\n                        oHint.innerHTML = \"We are collecting information .Please wait before adding new one\";\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(`err in fetch satellite position: `, err.message);\r\n                })\r\n        }\r\n    }\r\n\r\n    track = data => {\r\n        // check if there has position\r\n        if (data.length === 0 || !data[0].hasOwnProperty(\"positions\")) {\r\n            throw new Error(`no position data`);\r\n        }\r\n\r\n        const len = data[0].positions.length;\r\n        const {context2} = this.map;\r\n        let now = new Date();\r\n        let i = 0;\r\n\r\n        let timer = setInterval(() => {\r\n            // get current time\r\n            let currentTime = new Date();\r\n            let timePassed = i === 0 ? 0 : currentTime - now;\r\n            // convert time\r\n            let time = new Date(now.getTime() + 60 * timePassed);\r\n\r\n            context2.clearRect(0, 0, width, height);\r\n\r\n            context2.font = \"bold 12px 'PT Sans Caption', sans-serif\";\r\n            context2.marginTop = \"100px\";\r\n            context2.fillStyle = \"#282c34\";\r\n            context2.textAlign = \"center\";\r\n            context2.fillText(d3TimeFormat(time), width / 2, 80);\r\n\r\n            // when to clear timer\r\n            if (i >= len) {\r\n                clearInterval(timer);\r\n                this.setState({isDrawing: false});\r\n                const oHint = document.getElementsByClassName(\"hint\")[0];\r\n                oHint.innerHTML = \"\";\r\n                return;\r\n            }\r\n\r\n            // for ea\r\n            // ch satellite\r\n            data.forEach( sat => {\r\n                const { info, positions } = sat;\r\n                this.drawSat(info, positions[i]);       // pass current positions\r\n            });\r\n\r\n            i += 60;\r\n        }, 1000);\r\n    };\r\n\r\n    drawSat = ( sat, pos ) => {\r\n        const {satlongitude, satlatitude} = pos;\r\n\r\n        if (!satlongitude || !satlatitude) return;\r\n\r\n        const { satname } = sat;\r\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\r\n\r\n        const {projection, context2} = this.map;\r\n        const xy = projection([satlongitude, satlatitude]);\r\n\r\n        context2.fillStyle = this.color(nameWithNumber);\r\n        context2.beginPath();\r\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\r\n        context2.fill();\r\n\r\n        context2.font = \"bold 12px 'PT Sans Caption' sans-serif\";\r\n        context2.textAlign = \"center\";\r\n        context2.marginTop = \"100px\";\r\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\r\n    }\r\n\r\n    generateMap(land) {\r\n        // step1: create projection\r\n        const projection = geoEckert4()\r\n            .scale(200)\r\n            .translate([width / 2, height / 2])\r\n            .precision(.1);\r\n\r\n        const graticule = geoGraticule();\r\n\r\n        // step2: get canvas via ref\r\n        const canvas = d3Select(this.refMap.current)\r\n            .attr('width', width)\r\n            .attr('height', height);\r\n\r\n        const canvas2 = d3Select(this.refTrack.current)\r\n            .attr('width', width)\r\n            .attr('height', height);\r\n\r\n        const context = canvas.node().getContext(\"2d\");\r\n        const context2 = canvas2.node().getContext(\"2d\");\r\n\r\n        // step3: show data via path\r\n        let path = geoPath()\r\n            .projection(projection)\r\n            .context(context);\r\n\r\n        console.log(path);\r\n\r\n        land.forEach(ele => {\r\n            context.fillStyle = '#020c1c';\r\n            context.strokeStyle = '#fff';\r\n            context.globalAlpha = 0.8;\r\n            context.beginPath();\r\n            path(ele);\r\n            context.fill();\r\n            context.stroke();\r\n            context.strokeStyle = 'rgba(220, 220, 220, 0.8)';\r\n            context.beginPath();\r\n            path(graticule());\r\n            context.lineWidth = 0.1;\r\n            context.stroke();\r\n\r\n            // 头尾\r\n            context.beginPath();\r\n            context.lineWidth = 0.1;\r\n            path(graticule.outline());\r\n            context.stroke();\r\n        });\r\n\r\n        this.map = {\r\n            context: context,\r\n            context2: context2,\r\n            projection: projection,\r\n            graticule: graticule\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {isLoading} = this.state;\r\n\r\n        return (\r\n            <div className=\"map-box\">\r\n                {isLoading ? (\r\n                    <div className=\"spinner\">\r\n                        <Spin tip=\"Loading...\" size=\"large\"/>\r\n                    </div>\r\n                ) : null}\r\n                <canvas className=\"map\" ref={this.refMap}/>\r\n                <canvas className=\"track\" ref={this.refTrack}/>\r\n                <div className=\"hint\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WorldMap;","import React from 'react';\r\nimport SatSetting from \"./SatSetting\"\r\nimport SatelliteList from \"./SatelliteList\"\r\nimport {Row, Col} from 'antd';\r\nimport axios from \"axios\";\r\nimport {NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY} from \"../constants\";\r\nimport WorldMap from \"./WorldMap\";\r\n\r\n// sibling data communication\r\nclass Main extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            satInfo: null,\r\n            satList: null,\r\n            setting: null,\r\n            isLoadingList: false\r\n        };\r\n    }\r\n\r\n    showNearBySatellite = (setting) => {\r\n        this.setState({\r\n            setting: setting\r\n        })\r\n        this.fetchSatellite(setting);\r\n    }\r\n\r\n    fetchSatellite = (setting) => {\r\n        const { latitude, longitude, elevation, altitude } = setting;\r\n        const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\r\n        this.setState({\r\n            isLoadingList: true\r\n        });\r\n        axios.get(url)\r\n            .then(response => {\r\n                console.log('res ->', response);\r\n                this.setState( {\r\n                    satInfo: response.data,\r\n                    isLoadingList: false\r\n                })\r\n            })\r\n            .catch(err => {\r\n                console.log('err in fetch satellite ->', err);\r\n            })\r\n    }\r\n\r\n    showMap = (selected) => {\r\n        // store every data change via setState\r\n        console.log('show on the map');\r\n        this.setState(preState => ({\r\n            ...preState,\r\n            satList: [...selected]          // copy\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        const { satInfo, satList, setting, isLoadingList } = this.state;\r\n\r\n        return (\r\n            <Row className='main'>\r\n                <Col span={8}>\r\n                    <div className=\"left-side\">\r\n                        {/* child->parent*/}\r\n                        <SatSetting onShow={this.showNearBySatellite}/>\r\n                        <SatelliteList\r\n                            satInfo={satInfo}\r\n                            isLoading={isLoadingList}\r\n                            onShowMap={this.showMap}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n                <Col span={16} className=\"right-side\">\r\n                    {/* parent->child*/}\r\n                    <WorldMap\r\n                        satData={satList}\r\n                        observerData={setting} />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport Main from '../components/Main';\r\nimport '../styles/App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Main/>\r\n            <Footer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}